[
    {
        "function_name": "setOwner",
        "vulnerability": "Ownership Takeover",
        "criticism": "The reasoning is correct. The 'setOwner()' function is not protected by 'onlyOwner' modifier, which means any address can call this function and gain ownership of the contract. This is a severe vulnerability as it could allow an attacker to take over the contract and manipulate it to their advantage. The profitability for an attacker is also high as they could potentially gain control over all the assets controlled by the contract.",
        "correctness": 9,
        "severity": 9,
        "profitability": 9,
        "reason": "Any address can call 'setOwner()' function to gain ownership of the contract. The function should have been protected by 'onlyOwner' modifier, but it is not. Thus, an attacker could take over the contract and manipulate it to their advantage.",
        "code": "function setOwner(address _owner) returns (bool success) { owner = _owner; return true; }",
        "label": "Access Control",
        "file_name": "2018-10666.sol",
        "description": "The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables."
    },
    {
        "function_name": "uploadBalances",
        "vulnerability": "Arbitrary balance manipulation",
        "criticism": "The reasoning is partially correct. While it's true that the 'uploadBalances()' function allows the owner of the contract to set balances of any address, this is not necessarily a vulnerability. It's common for contract owners to have such control. However, if the owner is malicious, they could indeed use this function to commit fraud. The severity and profitability of this vulnerability would depend on the intentions of the owner.",
        "correctness": 6,
        "severity": 5,
        "profitability": 5,
        "reason": "The 'uploadBalances()' function allows the owner of the contract to arbitrarily set balances of any address. This could lead to theft of funds or other types of fraudulent activities.",
        "code": "function uploadBalances(address[] addresses, uint256[] balances) onlyOwner { require(!balancesLocked); require(addresses.length == balances.length); uint256 sum; for (uint256 i = 0; i < uint256(addresses.length); i++) { sum = safeAdd(sum, safeSub(balances[i], balanceOf[addresses[i]])); balanceOf[addresses[i]] = balances[i]; } balanceOf[owner] = safeSub(balanceOf[owner], sum); }",
        "label": "Access Control",
        "file_name": "2018-10666.sol",
        "description": "The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables."
    },
    {
        "function_name": "setExportFee",
        "vulnerability": "Arbitrary fee manipulation",
        "criticism": "The reasoning is correct. The 'setExportFee()' function allows the owner of the contract to arbitrarily set fees of any address. This could be used to perform unauthorized actions, such as arbitrarily increasing fees for certain addresses. However, the severity and profitability of this vulnerability would depend on the intentions of the owner.",
        "correctness": 9,
        "severity": 7,
        "profitability": 7,
        "reason": "The 'setExportFee()' function allows the owner of the contract to arbitrarily set fees of any address. This could be used to perform unauthorized actions, such as arbitrarily increasing fees for certain addresses.",
        "code": "function setExportFee(address addr, uint256 fee) onlyOwner { require(addr != 0x00000000000000000000000000000000000000ff); exportFee[addr] = fee; }",
        "label": "Access Control",
        "file_name": "2018-10666.sol",
        "description": "The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables."
    }
]