[
    {
        "function_name": "transferFrom",
        "vulnerability": "Reentrancy attack vulnerability",
        "criticism": "The reasoning is incorrect. The function does not call any external contracts, hence a reentrancy attack is not possible. The state changes after all the checks and there are no further calls that could lead to a reentrancy vulnerability. Therefore, the correctness score is low.",
        "correctness": 2,
        "severity": 0,
        "profitability": 0,
        "reason": "This function modifies the state of the contract before the actual transfer, which allows the attacker to call the function again before the previous call is completed, that is, to perform a reentrancy attack.",
        "code": "function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) { require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0); balances[_from] -= _amount; allowed[_from][msg.sender] -= _amount; balances[_to] += _amount; Transfer(_from, _to, _amount); return true; }",
        "label": "Integer Overflow",
        "file_name": "2018-13836.sol",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    },
    {
        "function_name": "multiTransfer",
        "vulnerability": "Integer overflow and underflow",
        "criticism": "The reasoning is partially correct. While the function does not explicitly protect against integer overflow and underflow, the Solidity compiler since version 0.8.0 includes built-in protection against these vulnerabilities. However, if an older compiler version is used, this could be a valid concern. The severity and profitability would be high if an attacker could manipulate the totalAmount to overflow.",
        "correctness": 6,
        "severity": 7,
        "profitability": 7,
        "reason": "The contract does not protect against integer overflow and underflow. If totalAmount is manipulated to overflow, it can result in an imbalance in the token contract.",
        "code": "function multiTransfer(address[] _addresses, uint[] _amounts) public returns (bool success) { require(_addresses.length <= 100 && _addresses.length == _amounts.length); uint totalAmount; for (uint a = 0; a < _amounts.length; a++) { totalAmount += _amounts[a]; } require(totalAmount > 0 && balances[msg.sender] >= totalAmount); balances[msg.sender] -= totalAmount; for (uint b = 0; b < _addresses.length; b++) { if (_amounts[b] > 0) { balances[_addresses[b]] += _amounts[b]; Transfer(msg.sender, _addresses[b], _amounts[b]); } } return true; }",
        "label": "Integer Overflow",
        "file_name": "2018-13836.sol",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    },
    {
        "function_name": "withdrawFunds",
        "vulnerability": "Unrestricted Ether withdrawal",
        "criticism": "The reasoning is correct. The owner of the contract can withdraw all the Ether at will without any restrictions or conditions. This could indeed result in a loss of users' trust in the contract. However, this is not a vulnerability per se, but rather a design decision that might be questionable. The severity and profitability are low as it is the owner who has this power, not an external attacker.",
        "correctness": 9,
        "severity": 2,
        "profitability": 2,
        "reason": "The owner of the contract can withdraw all the Ether at will without any restrictions or conditions. This may result in a loss of users' trust in the contract.",
        "code": "function withdrawFunds(address _token) public returns (bool success) { require(msg.sender == owner); if (_token == address(0)) { owner.transfer(this.balance); } else { Token ERC20 = Token(_token); ERC20.transfer(owner, ERC20.balanceOf(this)); } return true; }",
        "label": "Integer Overflow",
        "file_name": "2018-13836.sol",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    }
]