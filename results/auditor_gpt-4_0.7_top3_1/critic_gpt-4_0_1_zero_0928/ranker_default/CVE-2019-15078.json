[
    {
        "function_name": "distr",
        "vulnerability": "Unchecked return value",
        "criticism": "The reasoning is correct. The return statement is indeed placed before the condition to check if totalDistributed is greater than or equal to totalSupply. This means the condition will never be checked and the distributionFinished will always remain false. However, this is not an unchecked return value vulnerability, but rather a logical error in the code. The severity and profitability are low because this error does not allow an attacker to exploit the contract, but it could lead to incorrect behavior of the contract.",
        "correctness": 5,
        "severity": 2,
        "profitability": 1,
        "reason": "The return statement is placed before the condition to check if totalDistributed is greater than or equal to totalSupply. Therefore, the condition will never be checked and the distributionFinished will always remain false.",
        "code": "function distr(address _to, uint256 _amount) canDistr private returns (bool) { totalDistributed = totalDistributed.add(_amount); totalRemaining = totalRemaining.sub(_amount); balances[_to] = balances[_to].add(_amount); emit Distr(_to, _amount); emit Transfer(address(0), _to, _amount); return true; if (totalDistributed >= totalSupply) { distributionFinished = true; } }",
        "label": "Typo Constructor",
        "file_name": "2019-15078.sol",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free.",
        "final_score": 3.25
    },
    {
        "function_name": "getTokens",
        "vulnerability": "Reentrancy",
        "criticism": "The reasoning is incorrect. The function getTokens() is not vulnerable to reentrancy attack because it does not make an external call before it finishes altering the state of the contract. The distr() function is a private function and cannot be called by an external contract. Therefore, an attacker cannot call the getTokens() function recursively to drain ether. The severity and profitability are low because this vulnerability does not exist.",
        "correctness": 2,
        "severity": 1,
        "profitability": 1,
        "reason": "The function getTokens() is vulnerable to reentrancy attack. It directly calls the distr() function which alters the state of the contract. An attacker can call the getTokens() function recursively to drain ether.",
        "code": "function getTokens() payable canDistr onlyWhitelist public { if (value > totalRemaining) { value = totalRemaining; } require(value <= totalRemaining); address investor = msg.sender; uint256 toGive = value; distr(investor, toGive); if (toGive > 0) { blacklist[investor] = true; } if (totalDistributed >= totalSupply) { distributionFinished = true; } value = value.div(100000).mul(99999); }",
        "label": "Typo Constructor",
        "file_name": "2019-15078.sol",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free.",
        "final_score": 1.5
    },
    {
        "function_name": "withdraw",
        "vulnerability": "Unchecked return values",
        "criticism": "The reasoning is incorrect. The return value of owner.transfer(etherBalance) does not need to be checked because if the transfer fails, it will throw an exception and revert all changes. Therefore, there is no unchecked-underflow/overflow vulnerability. The severity and profitability are low because this vulnerability does not exist.",
        "correctness": 2,
        "severity": 1,
        "profitability": 1,
        "reason": "The return value of owner.transfer(etherBalance) is not checked. This can lead to an unchecked-underflow/overflow vulnerability if the call fails and the state of the contract is not updated.",
        "code": "function withdraw() onlyOwner public { uint256 etherBalance = address(this).balance; owner.transfer(etherBalance); }",
        "label": "Typo Constructor",
        "file_name": "2019-15078.sol",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free.",
        "final_score": 1.5
    }
]