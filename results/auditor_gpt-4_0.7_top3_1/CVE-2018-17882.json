[
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint256 _value) public returns (bool success) { balances[msg.sender] = safeSub(balances[msg.sender], _value); balances[_to] = safeAdd(balances[_to], _value); Transfer(msg.sender, _to, _value); return true; }",
        "vulnerability": "Missing Input Validation",
        "reason": "There is no verification of the _to address. If the _to address is set to 0x0, tokens will be burnt and cannot be recovered. This could lead to unintentional loss of tokens.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    },
    {
        "function_name": "batchTransfer",
        "code": "function batchTransfer(address[] _to, uint _value) public { balances[msg.sender] = safeSub( balances[msg.sender], _to.length * _value ); for (uint i = 0; i < _to.length; i++) { balances[_to[i]] = safeAdd(balances[_to[i]], _value); Transfer(msg.sender, _to[i], _value); } }",
        "vulnerability": "Potential Integer Overflow",
        "reason": "In the batchTransfer function, multiplying _to.length (unbounded) with _value can cause an integer overflow if the product is greater than MAX_UINT256. This can lead to incorrect balance updates and token theft.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { balances[_to] = safeAdd(balances[_to], _value); balances[_from] = safeSub(balances[_from], _value); if (_to != fights) { allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value); } Transfer(_from, _to, _value); return true; }",
        "vulnerability": "Missing Input Validation and Potential Front-Running",
        "reason": "The transferFrom function does not validate the _from and _to addresses. Also, it allows anyone to call the function and potentially front-run transactions, which can be exploited by attackers to gain unauthorized access to tokens.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    }
]