[
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public returns (bool success) { if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; } allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; }",
        "vulnerability": "Race Condition / Front Running",
        "reason": "In the approve function, there\u2019s a known race condition in ERC20 token standards. If the owner has a certain allowance and wants to change it, they first have to reduce the allowance to 0 and then increase it to the new desired amount. In the period after it is set to 0 and before it is set to the new amount, someone could use the approval and empty the allowance.",
        "file_name": "2018-18425.sol",
        "label": "Token Devalue",
        "description": "The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)"
    },
    {
        "function_name": "transfer, transferFrom",
        "code": "function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) { require(_to != address(0)); require(_amount <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_amount); balances[_to] = balances[_to].add(_amount); emit Transfer(msg.sender, _to, _amount); return true; } function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) { require(_to != address(0)); require(_amount <= balances[_from]); require(_amount <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_amount); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount); balances[_to] = balances[_to].add(_amount); emit Transfer(_from, _to, _amount); return true; }",
        "vulnerability": "Missing Input Validation",
        "reason": "The functions 'transfer' and 'transferFrom' do not prevent transfers to the contract itself. This could lead to an accidental loss of tokens.",
        "file_name": "2018-18425.sol",
        "label": "Token Devalue",
        "description": "The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)"
    },
    {
        "function_name": "withdraw",
        "code": "function withdraw() onlyOwner public { address myAddress = this; uint256 etherBalance = myAddress.balance; owner.transfer(etherBalance); }",
        "vulnerability": "Arbitrary Withdrawal",
        "reason": "The function 'withdraw' allows the owner to withdraw all the funds from the contract without any checks or conditions. This can lead to potential scams where the owner withdraws all the funds and disappears.",
        "file_name": "2018-18425.sol",
        "label": "Token Devalue",
        "description": "The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)"
    }
]