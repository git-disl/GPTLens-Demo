[
    {
        "function_name": "_transfer",
        "code": "function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value >= balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; emit Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",
        "vulnerability": "Integer Overflow and Underflow",
        "reason": "The addition of '_value' to 'balanceOf[_to]' can lead to overflow if the '_value' is very large. This can lead to arbitrary balance manipulation. Similarly, the subtraction of '_value' from 'balanceOf[_from]' can lead to underflow if '_value' is larger than 'balanceOf[_from]'.",
        "file_name": "2019-15079.sol",
        "label": "Typo Constructor",
        "description": "A typo exists in the constructor of a smart contract implementation for EAI through 2019-06-05, an Ethereum token. This vulnerability could be used by an attacker to acquire EAI tokens for free."
    },
    {
        "function_name": "burn",
        "code": "function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; emit Burn(msg.sender, _value); return true; }",
        "vulnerability": "Integer Underflow",
        "reason": "The subtraction of '_value' from 'balanceOf[msg.sender]' can lead to underflow if '_value' is larger than 'balanceOf[msg.sender]'. This can lead to arbitrary balance manipulation.",
        "file_name": "2019-15079.sol",
        "label": "Typo Constructor",
        "description": "A typo exists in the constructor of a smart contract implementation for EAI through 2019-06-05, an Ethereum token. This vulnerability could be used by an attacker to acquire EAI tokens for free."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]); allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; }",
        "vulnerability": "Reentrancy Attack",
        "reason": "The '_transfer' function is called before the 'allowance' is updated. This can potentially lead to reentrancy attack where the attacker can repeatedly call 'transferFrom' before the 'allowance' is updated, draining the contract's funds.",
        "file_name": "2019-15079.sol",
        "label": "Typo Constructor",
        "description": "A typo exists in the constructor of a smart contract implementation for EAI through 2019-06-05, an Ethereum token. This vulnerability could be used by an attacker to acquire EAI tokens for free."
    }
]