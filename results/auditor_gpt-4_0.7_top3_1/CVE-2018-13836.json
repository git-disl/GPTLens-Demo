[
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) { require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0); balances[_from] -= _amount; allowed[_from][msg.sender] -= _amount; balances[_to] += _amount; Transfer(_from, _to, _amount); return true; }",
        "vulnerability": "Reentrancy attack vulnerability",
        "reason": "This function modifies the state of the contract before the actual transfer, which allows the attacker to call the function again before the previous call is completed, that is, to perform a reentrancy attack.",
        "file_name": "2018-13836.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    },
    {
        "function_name": "multiTransfer",
        "code": "function multiTransfer(address[] _addresses, uint[] _amounts) public returns (bool success) { require(_addresses.length <= 100 && _addresses.length == _amounts.length); uint totalAmount; for (uint a = 0; a < _amounts.length; a++) { totalAmount += _amounts[a]; } require(totalAmount > 0 && balances[msg.sender] >= totalAmount); balances[msg.sender] -= totalAmount; for (uint b = 0; b < _addresses.length; b++) { if (_amounts[b] > 0) { balances[_addresses[b]] += _amounts[b]; Transfer(msg.sender, _addresses[b], _amounts[b]); } } return true; }",
        "vulnerability": "Integer overflow and underflow",
        "reason": "The contract does not protect against integer overflow and underflow. If totalAmount is manipulated to overflow, it can result in an imbalance in the token contract.",
        "file_name": "2018-13836.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    },
    {
        "function_name": "withdrawFunds",
        "code": "function withdrawFunds(address _token) public returns (bool success) { require(msg.sender == owner); if (_token == address(0)) { owner.transfer(this.balance); } else { Token ERC20 = Token(_token); ERC20.transfer(owner, ERC20.balanceOf(this)); } return true; }",
        "vulnerability": "Unrestricted Ether withdrawal",
        "reason": "The owner of the contract can withdraw all the Ether at will without any restrictions or conditions. This may result in a loss of users' trust in the contract.",
        "file_name": "2018-13836.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    }
]