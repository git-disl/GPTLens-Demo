[
    {
        "function_name": "distr",
        "vulnerability": "Unchecked return value",
        "criticism": "The reasoning is correct. The return statement is indeed placed before the condition to check if totalDistributed is greater than or equal to totalSupply. This means the condition will never be checked and the distributionFinished will always remain false. However, the severity and profitability of this vulnerability are low, as it does not allow an attacker to exploit the contract for personal gain.",
        "correctness": 9,
        "severity": 3,
        "profitability": 1,
        "reason": "The return statement is placed before the condition to check if totalDistributed is greater than or equal to totalSupply. Therefore, the condition will never be checked and the distributionFinished will always remain false.",
        "code": "function distr(address _to, uint256 _amount) canDistr private returns (bool) { totalDistributed = totalDistributed.add(_amount); totalRemaining = totalRemaining.sub(_amount); balances[_to] = balances[_to].add(_amount); emit Distr(_to, _amount); emit Transfer(address(0), _to, _amount); return true; if (totalDistributed >= totalSupply) { distributionFinished = true; } }",
        "label": "Typo Constructor",
        "file_name": "2019-15078.sol",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    },
    {
        "function_name": "getTokens",
        "vulnerability": "Reentrancy",
        "criticism": "The reasoning is incorrect. While the function does call the distr() function, it does not appear to be vulnerable to a reentrancy attack. The function does not make an external call before it finishes updating its state, which is the typical condition for a reentrancy vulnerability. Therefore, the correctness, severity, and profitability are all low.",
        "correctness": 2,
        "severity": 2,
        "profitability": 2,
        "reason": "The function getTokens() is vulnerable to reentrancy attack. It directly calls the distr() function which alters the state of the contract. An attacker can call the getTokens() function recursively to drain ether.",
        "code": "function getTokens() payable canDistr onlyWhitelist public { if (value > totalRemaining) { value = totalRemaining; } require(value <= totalRemaining); address investor = msg.sender; uint256 toGive = value; distr(investor, toGive); if (toGive > 0) { blacklist[investor] = true; } if (totalDistributed >= totalSupply) { distributionFinished = true; } value = value.div(100000).mul(99999); }",
        "label": "Typo Constructor",
        "file_name": "2019-15078.sol",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    },
    {
        "function_name": "withdraw",
        "vulnerability": "Unchecked return values",
        "criticism": "The reasoning is partially correct. While it's true that the return value of owner.transfer(etherBalance) is not checked, this does not lead to an unchecked-underflow/overflow vulnerability. The transfer function will throw an exception if the call fails, reverting all changes. Therefore, the correctness is moderate, but the severity and profitability are low.",
        "correctness": 5,
        "severity": 1,
        "profitability": 1,
        "reason": "The return value of owner.transfer(etherBalance) is not checked. This can lead to an unchecked-underflow/overflow vulnerability if the call fails and the state of the contract is not updated.",
        "code": "function withdraw() onlyOwner public { uint256 etherBalance = address(this).balance; owner.transfer(etherBalance); }",
        "label": "Typo Constructor",
        "file_name": "2019-15078.sol",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    }
]