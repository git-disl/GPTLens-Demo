[
    {
        "function_name": "ERC20",
        "vulnerability": "Improper contract initialization",
        "criticism": "The reasoning is correct. The contract is not initialized in a constructor but in a regular function, which means anyone can call the function and re-initialize the contract. This can lead to unpredictable behavior or potential attacks. The severity and profitability of this vulnerability are high because it can be exploited by any external attacker.",
        "correctness": 9,
        "severity": 9,
        "profitability": 9,
        "reason": "The contract is not initialized in a constructor but in a regular function. This means that anyone can call the function and re-initialize the contract, which can lead to unpredictable behavior or potential attacks.",
        "code": "function ERC20(uint256 _initialSupply,string _tokenName, string _tokenSymbol) public { totalSupply = _initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = _tokenName; symbol = _tokenSymbol; }",
        "label": "Typo Constructor",
        "file_name": "2019-15080.sol",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack.",
        "final_score": 9.0
    },
    {
        "function_name": "owned",
        "vulnerability": "Uninitialized contract ownership",
        "criticism": "The reasoning is correct. The contract ownership is not initialized until the function is called, which could allow an attacker to take control. However, the severity and profitability of this vulnerability are high only if the function is not called immediately after contract deployment. If the function is called right after deployment, the window of opportunity for an attacker is very small.",
        "correctness": 8,
        "severity": 7,
        "profitability": 7,
        "reason": "The contract ownership is intended to be initialized in the constructor, but the function named 'owned' is not marked as a constructor due to a typo. This means that the contract ownership is not initialized until the function is called, leaving a window of opportunity for an attacker to take control.",
        "code": "function owned() public { owner = msg.sender; }",
        "label": "Typo Constructor",
        "file_name": "2019-15080.sol",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack.",
        "final_score": 7.5
    },
    {
        "function_name": "transfer",
        "vulnerability": "Missing event emission after state change",
        "criticism": "The reasoning is incorrect. The Transfer event is not fired before the state update in the provided code. Therefore, the risk of re-entrancy attack is not present in this case. The correctness, severity, and profitability of this vulnerability are all low.",
        "correctness": 2,
        "severity": 2,
        "profitability": 2,
        "reason": "The Transfer event is fired before the state update, an attacker can re-enter before the state (balanceOf) is updated and drain the contract.",
        "code": "function transfer(address _to, uint256 _value) public returns (bool) {...}",
        "label": "Typo Constructor",
        "file_name": "2019-15080.sol",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack.",
        "final_score": 2.0
    }
]