[
    {
        "function_name": "batchTransfer",
        "vulnerability": "Possibility of double spending due to integer overflow",
        "criticism": "The reasoning is correct. The function does not check for integer overflow, which could lead to double spending. However, the severity is moderate because it requires a specific condition (large number of receivers and high transfer value) to exploit. The profitability is high because an attacker could potentially create tokens out of thin air.",
        "correctness": 8,
        "severity": 5,
        "profitability": 8,
        "reason": "The function batchTransfer does not check if the multiplication of the number of receivers and the value to be transferred would result in an integer overflow. This could allow an attacker to send tokens to more addresses than they have balance for, essentially creating tokens out of thin air.",
        "code": "function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) { uint cnt = _receivers.length; uint256 amount = uint256(cnt) * _value; require(cnt > 0 && cnt <= 20); require(_value > 0 && balances[msg.sender] >= amount); balances[msg.sender] = balances[msg.sender].sub(amount); for (uint i = 0; i < cnt; i++) { balances[_receivers[i]] = balances[_receivers[i]].add(_value); Transfer(msg.sender, _receivers[i], _value); } return true; }",
        "label": "Integer Overflow",
        "file_name": "2018-10299.sol",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue.",
        "final_score": 7.25
    },
    {
        "function_name": "transferFrom",
        "vulnerability": "Potential re-entrancy attack",
        "criticism": "The reasoning is incorrect. The Transfer event does not call an external contract, it only logs the transaction. Therefore, it is not vulnerable to re-entrancy attacks. The severity and profitability are both low because there is no actual vulnerability.",
        "correctness": 2,
        "severity": 0,
        "profitability": 0,
        "reason": "The function transferFrom could potentially be exposed to a re-entrancy attack since it calls an external contract (via the Transfer event) after updating the state. An attacker could take advantage of this by calling the same function again within the Transfer event, leading to unexpected behavior.",
        "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value > 0 && _value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true; }",
        "label": "Integer Overflow",
        "file_name": "2018-10299.sol",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue.",
        "final_score": 1.0
    },
    {
        "function_name": "BecToken",
        "vulnerability": "Potential underflow of total supply",
        "criticism": "The reasoning is incorrect. The total supply is set to a fixed value and does not depend on the decimal value. Therefore, there is no risk of underflow. The severity and profitability are both low because there is no actual vulnerability.",
        "correctness": 2,
        "severity": 0,
        "profitability": 0,
        "reason": "The constructor function BecToken sets the total supply of tokens to a fixed value. If the decimal value is set to a large number, this could result in an underflow of the total supply, creating a huge number of tokens.",
        "code": "function BecToken() { totalSupply = 7000000000 * (10**(uint256(decimals))); balances[msg.sender] = totalSupply; }",
        "label": "Integer Overflow",
        "file_name": "2018-10299.sol",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue.",
        "final_score": 1.0
    }
]