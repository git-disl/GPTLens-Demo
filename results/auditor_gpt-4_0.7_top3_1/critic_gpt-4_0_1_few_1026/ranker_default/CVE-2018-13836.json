[
    {
        "function_name": "multiTransfer",
        "vulnerability": "Integer overflow and underflow",
        "criticism": "The reasoning is correct. The function does not check for integer overflow when calculating the totalAmount, which could lead to an imbalance in the token contract. The severity is high because it could lead to a significant loss of tokens. The profitability is also high because an attacker could potentially exploit this vulnerability to gain more tokens than they should.",
        "correctness": 9,
        "severity": 9,
        "profitability": 9,
        "reason": "The contract does not protect against integer overflow and underflow. If totalAmount is manipulated to overflow, it can result in an imbalance in the token contract.",
        "code": "function multiTransfer(address[] _addresses, uint[] _amounts) public returns (bool success) { require(_addresses.length <= 100 && _addresses.length == _amounts.length); uint totalAmount; for (uint a = 0; a < _amounts.length; a++) { totalAmount += _amounts[a]; } require(totalAmount > 0 && balances[msg.sender] >= totalAmount); balances[msg.sender] -= totalAmount; for (uint b = 0; b < _addresses.length; b++) { if (_amounts[b] > 0) { balances[_addresses[b]] += _amounts[b]; Transfer(msg.sender, _addresses[b], _amounts[b]); } } return true; }",
        "label": "Integer Overflow",
        "file_name": "2018-13836.sol",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance.",
        "final_score": 9.0
    },
    {
        "function_name": "withdrawFunds",
        "vulnerability": "Unrestricted Ether withdrawal",
        "criticism": "The reasoning is correct. The owner of the contract can withdraw all the Ether at will without any restrictions or conditions. This could lead to a loss of users' trust in the contract. However, this is not a vulnerability but a design decision. The severity is moderate because it depends on the owner's intention. The profitability is low because an external attacker cannot profit from it.",
        "correctness": 7,
        "severity": 4,
        "profitability": 0,
        "reason": "The owner of the contract can withdraw all the Ether at will without any restrictions or conditions. This may result in a loss of users' trust in the contract.",
        "code": "function withdrawFunds(address _token) public returns (bool success) { require(msg.sender == owner); if (_token == address(0)) { owner.transfer(this.balance); } else { Token ERC20 = Token(_token); ERC20.transfer(owner, ERC20.balanceOf(this)); } return true; }",
        "label": "Integer Overflow",
        "file_name": "2018-13836.sol",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance.",
        "final_score": 4.5
    },
    {
        "function_name": "transferFrom",
        "vulnerability": "Reentrancy attack vulnerability",
        "criticism": "The reasoning is incorrect. The function does not call any external contracts, hence a reentrancy attack is not possible. The function also correctly updates the state before the event is emitted, which is a good practice to prevent reentrancy attacks. The severity and profitability are both low because an external attacker cannot exploit this vulnerability.",
        "correctness": 0,
        "severity": 0,
        "profitability": 0,
        "reason": "This function modifies the state of the contract before the actual transfer, which allows the attacker to call the function again before the previous call is completed, that is, to perform a reentrancy attack.",
        "code": "function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) { require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0); balances[_from] -= _amount; allowed[_from][msg.sender] -= _amount; balances[_to] += _amount; Transfer(_from, _to, _amount); return true; }",
        "label": "Integer Overflow",
        "file_name": "2018-13836.sol",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance.",
        "final_score": 0.0
    }
]