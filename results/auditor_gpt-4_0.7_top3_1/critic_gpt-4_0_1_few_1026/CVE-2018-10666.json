[
    {
        "function_name": "setOwner",
        "vulnerability": "Ownership Takeover",
        "criticism": "The reasoning is correct. The function 'setOwner' is not protected by the 'onlyOwner' modifier, which means any address can call this function and take over the ownership of the contract. This is a severe vulnerability as it allows an attacker to gain full control over the contract and manipulate it to their advantage. The profitability is high as the attacker can potentially drain all the funds from the contract.",
        "correctness": 9,
        "severity": 9,
        "profitability": 9,
        "reason": "Any address can call 'setOwner()' function to gain ownership of the contract. The function should have been protected by 'onlyOwner' modifier, but it is not. Thus, an attacker could take over the contract and manipulate it to their advantage.",
        "code": "function setOwner(address _owner) returns (bool success) { owner = _owner; return true; }",
        "label": "Access Control",
        "file_name": "2018-10666.sol",
        "description": "The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables."
    },
    {
        "function_name": "uploadBalances",
        "vulnerability": "Arbitrary balance manipulation",
        "criticism": "The reasoning is correct. The 'uploadBalances' function allows the owner to arbitrarily set the balances of any address. This is a severe vulnerability as it allows the owner to potentially steal funds or engage in other fraudulent activities. However, the profitability is low as only the owner can exploit this vulnerability.",
        "correctness": 9,
        "severity": 9,
        "profitability": 1,
        "reason": "The 'uploadBalances()' function allows the owner of the contract to arbitrarily set balances of any address. This could lead to theft of funds or other types of fraudulent activities.",
        "code": "function uploadBalances(address[] addresses, uint256[] balances) onlyOwner { require(!balancesLocked); require(addresses.length == balances.length); uint256 sum; for (uint256 i = 0; i < uint256(addresses.length); i++) { sum = safeAdd(sum, safeSub(balances[i], balanceOf[addresses[i]])); balanceOf[addresses[i]] = balances[i]; } balanceOf[owner] = safeSub(balanceOf[owner], sum); }",
        "label": "Access Control",
        "file_name": "2018-10666.sol",
        "description": "The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables."
    },
    {
        "function_name": "setExportFee",
        "vulnerability": "Arbitrary fee manipulation",
        "criticism": "The reasoning is correct. The 'setExportFee' function allows the owner to arbitrarily set the fees of any address. This is a moderate vulnerability as it allows the owner to potentially perform unauthorized actions, such as arbitrarily increasing fees for certain addresses. However, the profitability is low as only the owner can exploit this vulnerability.",
        "correctness": 9,
        "severity": 5,
        "profitability": 1,
        "reason": "The 'setExportFee()' function allows the owner of the contract to arbitrarily set fees of any address. This could be used to perform unauthorized actions, such as arbitrarily increasing fees for certain addresses.",
        "code": "function setExportFee(address addr, uint256 fee) onlyOwner { require(addr != 0x00000000000000000000000000000000000000ff); exportFee[addr] = fee; }",
        "label": "Access Control",
        "file_name": "2018-10666.sol",
        "description": "The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables."
    }
]