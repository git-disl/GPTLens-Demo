[
    {
        "function_name": "transfer",
        "vulnerability": "No zero address check",
        "criticism": "The reasoning is correct. The function does not check if the _to address is the zero address. This could lead to accidental destruction of tokens if they are sent to the zero address. However, the severity and profitability of this vulnerability are low, because it requires a user error and an external attacker cannot profit from it.",
        "correctness": 7,
        "severity": 2,
        "profitability": 0,
        "reason": "In the transfer function, there's no check for the zero address. This means that tokens could be accidentally destroyed by sending them to the zero address.",
        "code": "function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) unFrozenAccount onlyTransferable { if (frozenAccount[_to]) { InvalidAccount(_to, \"The receiver account is frozen\"); } else { balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); } }",
        "label": "Access Control",
        "file_name": "2018-19830.sol",
        "description": "The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity."
    },
    {
        "function_name": "transferFrom",
        "vulnerability": "No zero address check",
        "criticism": "The reasoning is correct. The function does not check if the _to address is the zero address. This could lead to accidental destruction of tokens if they are sent to the zero address. However, the severity and profitability of this vulnerability are low, because it requires a user error and an external attacker cannot profit from it.",
        "correctness": 7,
        "severity": 2,
        "profitability": 0,
        "reason": "Similar to the transfer function, there is no check in place to prevent tokens from being sent to the zero address, leading to potential loss of tokens.",
        "code": "function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) unFrozenAccount onlyTransferable{ var _allowance = allowed[_from][msg.sender]; require(!frozenAccount[_from]&&!frozenAccount[_to]); balances[_to] = balances[_to].add(_value); balances[_from] = balances[_from].sub(_value); allowed[_from][msg.sender] = _allowance.sub(_value); Transfer(_from, _to, _value); }",
        "label": "Access Control",
        "file_name": "2018-19830.sol",
        "description": "The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity."
    },
    {
        "function_name": "approve",
        "vulnerability": "Race condition",
        "criticism": "The reasoning is partially correct. The function does not handle the race condition where the spender can spend the old and new allowance before the old allowance is set to zero and the new allowance is set. However, the severity and profitability of this vulnerability are low, because it requires a specific sequence of transactions and an external attacker cannot easily profit from it.",
        "correctness": 5,
        "severity": 2,
        "profitability": 1,
        "reason": "The approve function is susceptible to a front-running attack because it does not handle the race condition where the spender can spend the old and new allowance before the old allowance is set to zero and the new allowance is set.",
        "code": "function approve(address _spender, uint _value) unFrozenAccount { if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw; allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); }",
        "label": "Access Control",
        "file_name": "2018-19830.sol",
        "description": "The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity."
    }
]